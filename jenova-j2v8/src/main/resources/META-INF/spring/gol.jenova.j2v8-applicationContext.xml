<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:context="http://www.springframework.org/schema/context"
	   xmlns:lang="http://www.springframework.org/schema/lang"
	   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
				http://www.springframework.org/schema/lang http://www.springframework.org/schema/lang/spring-lang.xsd
                           http://www.springframework.org/schema/context
                           http://www.springframework.org/schema/context/spring-context.xsd">

	<bean id="jenova" class="com.eclipsesource.examples.gol.jenova.j2v8.GameOfLifeWrapper">
		<property name="gameOfLife" ref="jenova-j2v8" />
	</bean>

	<!-- TODO replace nashorn with J2V8 -->
	<lang:std id="jenova-j2v8" engine="nashorn" script-interfaces="com.eclipsesource.examples.gol.jenova.j2v8.FlatGameOfLife">
		<lang:inline-script>
<![CDATA[
function next(foo, rowLength, colLength) {
	// mapping of int[] to two dimensional JS array
	var board = []
	for(var i = 0; i < rowLength; i++) {
		var row = [];
		for(var j = 0; j < colLength; j++) {
			row[j] = foo[i * rowLength + j];
		}
    	board[i] = row;
	}
	var width = board[0].length,
		newBoard = board.map(function(row, rowIndex) {
			return row.map(function(cell, colIndex) {
				var topRow = (rowIndex - 1) >= 0 ? (rowIndex - 1) : board.length - 1,
					bottomRow = (rowIndex + 1) % board.length,
					leftCol = (colIndex - 1) >= 0 ? (colIndex - 1) : width - 1,
					rightCol = (colIndex + 1) % width,
					neighbors = [
						board[topRow][leftCol], board[topRow][colIndex], board[topRow][rightCol],
						board[rowIndex][leftCol], board[rowIndex][rightCol],
						board[bottomRow][leftCol], board[bottomRow][colIndex], board[bottomRow][rightCol]
					],
					neighborCount = neighbors.reduce(function(memo, neighbor) {
						return memo + neighbor;
					}, 0);
				if (cell === 0) {
					return neighborCount === 3 ? 1 : 0;
				}
				return (neighborCount === 2 || neighborCount === 3) ? 1 : 0;
			});
		});
	// mapping of two dimensional JS array to int[]
	var result = []
	for(var i = 0; i < rowLength; i++) {
    	row = newBoard[i];
		for(var j = 0; j < colLength; j++) {
			result[i * rowLength + j] = row[j]
		}
	}
    return result;
}
]]>
		</lang:inline-script>
	</lang:std>
</beans>
